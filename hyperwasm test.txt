1、两个编译版本工作核心为单核和双核，绑不同的物理核并同时运行，端口不同
	第一步：观察冷启动延迟，预期结果在毫秒级别，两个版本一致
	第二步：清除env，然后再次启动同一个应用，观察温启动延迟，预期结果是几十微秒
	第三步：分别在两个进程内测试，使用相同的任务参数进行压测得到最快执行时长
	第四步：分别在两个进程内真实执行任务，相对截止时间<最快执行时长，预期结果失败
	第五步：分别在两个进程内真实执行一次任务，相对截止时间>最快执行时长，预期结果成功，显示实际执行时长<相对截止时间
	第六步：分别在两个进程内真实执行多次任务，（设置一种情景使所有任务通过准入控制）相对截止时间>最快执行时长，预期结果全部成功，显示实际执行时长<相对截止时间，双核总执行时间大约是单核的一半
	第七步：在第六步基础之上，启动大量非实时任务，观察是否对第六步中的实时任务产生影响，预期结果和第六步一样
	第八步：增加第六步任务个数，（设置一种情景，超过单核的准入控制范围，但是不超过双核的），预期结果单核一定有拒绝，双核的有少量拒绝
	第九步：实时任务之间的抢占，（设置一种抢占成功的场景），预期结果成功抢占
	第十步：在第九步的基础之上，增加一个可以被准入的实时任务，但不抢占，预期结果按截止时间调度
	第十一步：观察非实时的时钟中断，预期结果多个任务循环执行
	第十二步：在运行非实时任务的同时，插入执行实时任务，预期结果实时抢占非实时
	第十三步：观察时钟中断对系统的效率影响（定时器间隔一个100微秒，另一个1毫秒），预期结果100微秒的循环调度次数更多，系统开销更大